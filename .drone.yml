kind: pipeline
name: default

workspace:
  base: /go
  path: src/github.com/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}

steps:

- name: test
  image: golang:1.13
  pull: true
  settings:
    mirror:
      from_secret: docker_proxy_mirror
  commands:
  - go vet
  - go test -cover -coverprofile=coverage.out

- name: build_linux_amd64
  image: golang:1.13
  depends_on: [ test ]
  environment:
    GOOS: linux
    GOARCH: amd64
    CGO_ENABLED: 0
  settings:
    mirror:
      from_secret: docker_proxy_mirror
  commands:
  - |
    if test "${DRONE_TAG}" = ""; then
      go build -v -ldflags "-X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/amd64/${DRONE_REPO_NAME}
    else
      go build -v -ldflags "-X main.version=${DRONE_TAG##v} -X main.build=${DRONE_BUILD_NUMBER}" -a -o release/linux/amd64/${DRONE_REPO_NAME}
    fi

- name: publish_linux_amd64
  depends_on: [ build_linux_amd64 ]
  image: plugins/ecr
  settings:
    mirror:
      from_secret: docker_proxy_mirror
    purge: true
    tags:
      - latest
      - ${DRONE_COMMIT}
    registry:
      from_secret: drone-ecr-registry
    repo:
      from_secret: drone-ecr-url
    dockerfile: Dockerfile
    access_key:
      from_secret: aws_access_key
    secret_key:
      from_secret: aws_access_key_secret
    region: eu-west-1



---
kind: "secret"
name: "aws_access_key"
get:
  path: "drone/ci-production-drone-ecs"
  name: "aws_access_key"

---
kind: "secret"
name: "aws_access_key_secret"
get:
  path: "drone/ci-production-drone-ecs"
  name: "aws_access_key_secret"

---
kind: "secret"
name: "drone-ecr-registry"
get:
  path: "drone/ci-production-drone-ecs"
  name: "ecr-host"

---
kind: "secret"
name: "drone-ecr-url"
get:
  path: "drone/ci-production-drone-ecs"
  name: "ecr-url"
